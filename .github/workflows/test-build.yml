name: Test & Build
on:
  push:
    branches: [ master ]

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: waichu
          POSTGRES_DB: waichu
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-backend-test-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-${{ runner.os }}-backend-test-
            cargo-${{ runner.os }}-

      - name: Test backend
        uses: actions-rs/cargo@v1
        env:
          SQLX_OFFLINE: true
          TEST_DATABASE_URL: postgresql://waichu:password@localhost:5432/waichu
        with:
          command: test
          args: --release -p backend -- --test-threads 1

      - name: Build backend
        uses: actions-rs/cargo@v1
        env:
          SQLX_OFFLINE: true
        with:
          command: build
          args: -p backend --release

      - name: Upload backend binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: backend
          path: target/release/backend

#  TODO test frontend with cypress

  build:
    runs-on: ubuntu-latest
    needs:
      - backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-build-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-${{ runner.os }}-build-
            cargo-${{ runner.os }}-backend-test-
            cargo-${{ runner.os }}-

      - name: Install trunk
        run: |
          TRUNK_VERSION=$(curl -s https://api.github.com/repos/thedodd/trunk/releases/latest | grep -oP '(?<="tag_name": ")[^"]*') && \
          wget -qO- https://github.com/thedodd/trunk/releases/download/${TRUNK_VERSION}/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf- && \
          mv trunk ~/.cargo/bin/ && \
          wget -qO- https://github.com/rustwasm/wasm-bindgen/releases/download/0.2.69/wasm-bindgen-0.2.69-x86_64-unknown-linux-musl.tar.gz | tar -xzf- && \
          mv wasm-bindgen-0.2.69-x86_64-unknown-linux-musl/wasm-bindgen ~/.cargo/bin/

      - name: Build frontend
        env:
          RUSTFLAGS: -C opt-level=z -C panic=abort
        run: trunk build frontend/index.html --release --dist ./dist

      - name: Download backend atrifact
        uses: actions/download-artifact@v2
        with:
          name: backend
          path: artifacts/backend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.workflow
          push: true
          tags: ghcr.io/hamza1311/waichu:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
